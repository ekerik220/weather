{"version":3,"sources":["util/mapWeatherIcon.js","Components/CurrentWeather.js","Components/HourlyWeather.js","Components/SecondaryWeather.js","Components/WeeklyWeather.js","Components/DayBanner.js","App.js","serviceWorker.js","index.js"],"names":["mapWeatherIcon","weather_icon_string","CurrentWeather","props","currentTemp","Math","round","currentWeather","temperature","icon","id","city","className","HourlyWeather","hours","hourlyWeather","data","slice","map","hour","index","key","Date","time","getHours","SecondaryWeather","humidity","windSpeed","pressure","uvIndex","WeeklyWeather","days","weeklyWeather","day","day_name","getDay","temperatureHigh","temperatureLow","DayBanner","date","day_number","getDate","App","useState","setCity","setCurrentWeather","setWeeklyWeather","setHourlyWeather","useEffect","navigator","geolocation","getCurrentPosition","loc","coords","request","XMLHttpRequest","url","latitude","longitude","open","onreadystatechange","readyState","status","JSON","parse","responseText","address","county","send","getCity","currently","hourly","daily","getWeather","error","code","console","log","enableHighAccuracy","timeout","maximumAge","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1f71df64.chunk.js","sourcesContent":["function mapWeatherIcon(weather_icon_string) {\n    switch(weather_icon_string) {\n        case \"clear-day\":\n            return \"wi wi-day-sunny\";\n        case \"clear-night\":\n            return \"wi wi-night-clear\";\n        case \"rain\":\n            return \"wi wi-rain\";\n        case \"snow\":\n            return \"wi wi-snow\";\n        case \"sleet\":\n            return \"wi wi-sleet\";\n        case \"wind\":\n            return \"wi wi-strong-wind\";\n        case \"fog\":\n            return \"wi wi-fog\";\n        case \"cloudy\":\n            return \"wi wi-cloudy\";\n        case \"partly-cloudy-day\":\n            return \"wi wi-day-cloudy\";\n        case \"partly-cloudy-night\":\n            return \"wi wi-night-alt-cloudy\";\n        default:\n            return \"wi wi-cloudy\";\n    }\n}\n\nexport default mapWeatherIcon;","import React from \"react\";\nimport mapWeatherIcon from \"../util/mapWeatherIcon.js\";\n\nfunction CurrentWeather(props) {\n  const currentTemp = Math.round(props.currentWeather.temperature);\n  const icon = props.currentWeather.icon;\n\n  return (\n    <div id=\"current-weather\">\n      <div id=\"current-temperature-box\">\n        <span id=\"city-name\">{props.city}</span>\n        <span id=\"current-temp\">+{currentTemp}째</span>\n      </div>\n      <div id=\"current-icon\">\n        <i className={mapWeatherIcon(icon)}></i>\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentWeather;\n","import React from \"react\";\nimport mapWeatherIcon from \"../util/mapWeatherIcon.js\";\n\n\nfunction HourlyWeather(props) {\n  const hours = props.hourlyWeather.data.slice(1, 6); // The 5 hours after current hour\n  return (\n    <div id=\"hourly-weather\">\n      {hours.map((hour, index) => {\n        return (\n          <div className=\"hour\" key={index}>\n            <span className=\"hour-label\">{new Date(hour.time * 1000).getHours() + \":00\"}</span> {/* hour.time is in UNIX units at first */}\n            <span>{Math.round(hour.temperature) + \"째\"}</span>\n            <i className={mapWeatherIcon(hour.icon)}></i>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default HourlyWeather;\n","import React from \"react\";\n\nfunction SecondaryWeather(props) {\n  return (\n    <div id=\"secondary-weather\">\n      <div className=\"secondary-category\">\n        <span className=\"secondary-category-label\">Humidity</span>\n        <span>{Math.round(props.currentWeather.humidity * 100) + \"%\"}</span>\n      </div>\n      <div className=\"secondary-category\">\n        <span className=\"secondary-category-label\">Wind</span>\n        <span>{Math.round(props.currentWeather.windSpeed) + \" m/s\"}</span>\n      </div>\n      <div className=\"secondary-category\">\n        <span className=\"secondary-category-label\">Air Pressure</span>\n        <span>{(props.currentWeather.pressure*10)/10 + \" mm\"}</span> {/* *10/10 rounds to 1 decimal */}\n      </div>\n      <div className=\"secondary-category\">\n        <span className=\"secondary-category-label\">UV</span>\n        <span>{props.currentWeather.uvIndex}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default SecondaryWeather;\n","import React from \"react\";\nimport mapWeatherIcon from \"../util/mapWeatherIcon.js\";\n\n\nfunction WeeklyWeather(props) {\n  const days = props.weeklyWeather.data.slice(1, 8); // Next 7 days after current day\n  return (\n    <div id=\"weekly-weather\">\n      {days.map(day => {\n        const day_index = new Date(day.time * 1000).getDay();\n        const day_name = [\n          \"Sunday\",\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\"\n        ][day_index];\n        return (\n          <div className=\"day\" key={day_name}>\n            <span className=\"day-name\">{day_name}</span>\n            <i className={mapWeatherIcon(day.icon)}></i>\n            <span>{Math.round(day.temperatureHigh) + \"째\"}</span>\n            <span className=\"low-temp\">{Math.round(day.temperatureLow) + \"째\"}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default WeeklyWeather;\n","import React from 'react';\n\nfunction DayBanner() {\n  const date = new Date();\n  const day_name = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ][date.getDay()];\n  const day_number = date.getDate();\n\n  return (\n    <div id=\"day-banner\">\n      <span>{day_name + \", \" + day_number}</span>\n    </div>\n  );\n}\n\nexport default DayBanner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CurrentWeather from \"./Components/CurrentWeather\";\nimport HourlyWeather from \"./Components/HourlyWeather\";\nimport SecondaryWeather from \"./Components/SecondaryWeather\";\nimport WeeklyWeather from \"./Components/WeeklyWeather\";\nimport DayBanner from \"./Components/DayBanner\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [weeklyWeather, setWeeklyWeather] = useState();\n  const [hourlyWeather, setHourlyWeather] = useState();\n\n  // Get coordinates when component mounts, and then call the getCity and getWeather functions.\n  useEffect(function getCoords() {\n    function success(loc) {\n      getCity(loc.coords);\n      getWeather(loc.coords);\n    }\n\n    function error(error) {\n      switch (error.code) {\n        case 1:\n          console.log(\"Permission denied\");\n          break;\n        case 2:\n          console.log(\"Position unavailable\");\n          break;\n        case 3:\n          console.log(\"Timeout\");\n          break;\n        default:\n          console.log(\"Unknown error\");\n          break;\n      }\n    }\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 1000,\n      maximumAge: 0\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error, options);\n    }\n  }, []);\n\n  // Get city name from locationiq API (free license, 2500 calls per day limit).\n  function getCity(coords) {\n    const request = new XMLHttpRequest();\n    const method = \"GET\";\n    const url =\n      \"https://us1.locationiq.com/v1/reverse.php?key=23934d134759e2&lat=\" +\n      coords.latitude +\n      \"&lon=\" +\n      coords.longitude +\n      \"&format=json&zoom=10&normalizecity=1\";\n    const async = true;\n\n    request.open(method, url, async);\n    request.onreadystatechange = () => {\n      if (request.readyState === 4 && request.status === 200) {\n        const data = JSON.parse(request.responseText);\n        setCity(data.address.county);\n      }\n    };\n    request.send();\n  }\n\n  // Get weather information from Dark Sky API (free license, 1000 calls per day limit).\n  function getWeather(coords) {\n    const request = new XMLHttpRequest();\n    const method = \"GET\";\n    const url =\n      \"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/847c0264665bdfcc55531c19f1e68eb4/\" +\n      coords.latitude +\n      \",\" +\n      coords.longitude +\n      \"?units=auto\";\n    const async = true;\n\n    request.open(method, url, async);\n    request.onreadystatechange = () => {\n      if (request.readyState === 4 && request.status === 200) {\n        const data = JSON.parse(request.responseText);\n        setCurrentWeather(data.currently);\n        setHourlyWeather(data.hourly);\n        setWeeklyWeather(data.daily);\n      }\n    };\n    request.send();\n  }\n\n  // Render the application only if both API requests have returned something already.\n  if (city && currentWeather && hourlyWeather && weeklyWeather) {\n    return (\n        <div className=\"App\">\n          <DayBanner />\n          <CurrentWeather currentWeather={currentWeather} city={city} />\n          <HourlyWeather hourlyWeather={hourlyWeather} />\n          <SecondaryWeather currentWeather={currentWeather} />\n          <WeeklyWeather weeklyWeather={weeklyWeather} />\n        </div>\n    );\n  }\n\n  // If API calls haven't returned something yet, render a blank div.\n  return <div></div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}